text = '''
Ｕｎｉｃｏｄｅ! 🅤🅝🅘🅒🅞🅓🅔‽ 🇺‌🇳‌🇮‌🇨‌🇴‌🇩‌🇪! 😄 The very name strikes fear and awe into the hearts of programmers worldwide. We all know we ought to “support Unicode” 
in our software (whatever that means—like using wchar_t for all the strings, right?). But Unicode can be abstruse, and diving into the thousand-page Unicode Standard plus 
its dozens of supplementary annexes, reports, and notes can be more than a little intimidating. I don’t blame programmers for still 
finding the whole thing mysterious, even 30 years after Unicode’s inception.
'''

tokens = text.encode("utf-8") # raw bytes 
tokens = list(map(int, tokens)) # convert into a list of integers in range 0-255
print("-----")
# print(text)
print("-----")
print("length of text = ", len(text))
print("-----")
# print(tokens)
print("length of tokens = ", len(tokens))
#length = 621

'''
tokens = 

[10, 239, 188, 181, 239, 189, 142, 239, 189, 137, 239, 189, 131, 239, 189, 143, 239, 189, 132, 239, 189, 133, 
33, 32, 240, 159, 133, 164, 240, 159, 133, 157, 240, 159, 133, 152, 240, 159, 133, 146, 240, 159, 133, 158, 240, 
159, 133, 147, 240, 159, 133, 148, 226, 128, 189, 32, 240, 159, 135, 186, 226, 128, 140, 240, 159, 135, 179, 226, 
128, 140, 240, 159, 135, 174, 226, 128, 140, 240, 159, 135, 168, 226, 128, 140, 240, 159, 135, 180, 226, 128, 140, 
240, 159, 135, 169, 226, 128, 140, 240, 159, 135, 170, 33, 32, 240, 159, 152, 132, 32, 84, 104, 101, 32, 118, 101, 
114, 121, 32, 110, 97, 109, 101, 32, 115, 116, 114, 105, 107, 101, 115, 32, 102, 101, 97, 114, 32, 97, 110, 100, 32, 
97, 119, 101, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 104, 101, 97, 114, 116, 115, 32, 111, 102, 32, 112, 114, 
111, 103, 114, 97, 109, 109, 101, 114, 115, 32, 119, 111, 114, 108, 100, 119, 105, 100, 101, 46, 32, 87, 101, 32, 97, 
108, 108, 32, 107, 110, 111, 119, 32, 119, 101, 32, 111, 117, 103, 104, 116, 32, 116, 111, 32, 226, 128, 156, 115, 117, 
112, 112, 111, 114, 116, 32, 85, 110, 105, 99, 111, 100, 101, 226, 128, 157, 32, 10, 105, 110, 32, 111, 117, 114, 32, 
115, 111, 102, 116, 119, 97, 114, 101, 32, 40, 119, 104, 97, 116, 101, 118, 101, 114, 32, 116, 104, 97, 116, 32, 109, 
101, 97, 110, 115, 226, 128, 148, 108, 105, 107, 101, 32, 117, 115, 105, 110, 103, 32, 119, 99, 104, 97, 114, 95, 116, 
32, 102, 111, 114, 32, 97, 108, 108, 32, 116, 104, 101, 32, 115, 116, 114, 105, 110, 103, 115, 44, 32, 114, 105, 103, 
104, 116, 63, 41, 46, 32, 66, 117, 116, 32, 85, 110, 105, 99, 111, 100, 101, 32, 99, 97, 110, 32, 98, 101, 32, 97, 98, 
115, 116, 114, 117, 115, 101, 44, 32, 97, 110, 100, 32, 100, 105, 118, 105, 110, 103, 32, 105, 110, 116, 111, 32, 116, 
104, 101, 32, 116, 104, 111, 117, 115, 97, 110, 100, 45, 112, 97, 103, 101, 32, 85, 110, 105, 99, 111, 100, 101, 32, 83, 
116, 97, 110, 100, 97, 114, 100, 32, 112, 108, 117, 115, 32, 10, 105, 116, 115, 32, 100, 111, 122, 101, 110, 115, 32, 111, 
102, 32, 115, 117, 112, 112, 108, 101, 109, 101, 110, 116, 97, 114, 121, 32, 97, 110, 110, 101, 120, 101, 115, 44, 32, 114,
101, 112, 111, 114, 116, 115, 44, 32, 97, 110, 100, 32, 110, 111, 116, 101, 115, 32, 99, 97, 110, 32, 98, 101, 32, 109, 
111, 114, 101, 32, 116, 104, 97, 110, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 105, 110, 116, 105, 109, 105, 100, 
97, 116, 105, 110, 103, 46, 32, 73, 32, 100, 111, 110, 226, 128, 153, 116, 32, 98, 108, 97, 109, 101, 32, 112, 114, 111, 
103, 114, 97, 109, 109, 101, 114, 115, 32, 102, 111, 114, 32, 115, 116, 105, 108, 108, 32, 10, 102, 105, 110, 100, 105, 
110, 103, 32, 116, 104, 101, 32, 119, 104, 111, 108, 101, 32, 116, 104, 105, 110, 103, 32, 109, 121, 115, 116, 101, 114, 
105, 111, 117, 115, 44, 32, 101, 118, 101, 110, 32, 51, 48, 32, 121, 101, 97, 114, 115, 32, 97, 102, 116, 101, 114, 
32, 85, 110, 105, 99, 111, 100, 101, 226, 128, 153, 115, 32, 105, 110, 99, 101, 112, 116, 105, 111, 110, 46, 10]
'''

def get_pairs(ids):
    count = {}
    for pair in zip(ids, ids[1:]): #iterating through consecutive integers through the list(check diary for explanation)
        count[pair] = count.get(pair, 0) + 1 #frequency DSA

    return count

stats = get_pairs(tokens)
# print(stats)
# print(sorted(((v,k) for k,v in stats.items()), reverse=True))

'''
Output of stats(sorted list) - 

[(20, (101, 32)), (15, (240, 159)), (12, (226, 128)), (12, (105, 110)), (10, (115, 32)), 
(10, (97, 110)), (10, (32, 97)), (9, (32, 116)), (8, (116, 104)), (7, (159, 135)), 
(7, (159, 133)), (7, (97, 114)), (6, (239, 189)), (6, (140, 240)), (6, (128, 140)), 
(6, (116, 32)), (6, (114, 32)), (6, (111, 114)), (6, (110, 103)), (6, (110, 100)), 
(6, (109, 101)), (6, (104, 101)), (6, (101, 114)), (5, (117, 115)), (5, (115, 116)), 
(5, (110, 32)), (5, (100, 101)), (5, (44, 32)), (5, (32, 115)), (4, (116, 105)), 
(4, (116, 101)), (4, (115, 44)), (4, (114, 105)), (4, (111, 117)), (4, (111, 100)), 
(4, (110, 116)), (4, (110, 105)), (4, (105, 99)), (4, (104, 97)), (4, (103, 32)), 
(4, (101, 97)), (4, (100, 32)), (4, (99, 111)), (4, (97, 109)), (4, (85, 110)), 
(4, (32, 119)), (4, (32, 111)), (4, (32, 105)), (4, (32, 85)), (3, (118, 101)), 
(3, (116, 115)), (3, (116, 114)), (3, (116, 111)), (3, (114, 116)), (3, (114, 115)), 
(3, (114, 101)), (3, (111, 102)), (3, (111, 32)), (3, (108, 108)), (3, (108, 101)), 
(3, (108, 32)), (3, (101, 115)), (3, (101, 110)), (3, (97, 116)), (3, (46, 32)), 
(3, (32, 240)), (3, (32, 112)), (3, (32, 109)), (3, (32, 102)), (3, (32, 100)), 
(3, (32, 98)), (3, (32, 10)), (2, (128, 153)), (2, (121, 32)), (2, (119, 104)), 
(2, (119, 101)), (2, (117, 112)), (2, (116, 97)), (2, (115, 117)), (2, (114, 121)), 
(2, (114, 111)), (2, (114, 97)), (2, (112, 114)), (2, (112, 112)), (2, (112, 111)), 
(2, (112, 108)), (2, (111, 110)), (2, (111, 103)), (2, (110, 115)), (2, (110, 111)), 
(2, (109, 109)), (2, (108, 105)), (2, (107, 101)), (2, (105, 116)), (2, (105, 111)), 
(2, (105, 107)), (2, (105, 100)), (2, (104, 116)), (2, (104, 111)), (2, (103, 114)), 
(2, (103, 104)), (2, (102, 116)), (2, (102, 111)), (2, (102, 32)), (2, (101, 226)), 
(2, (101, 118)), (2, (101, 112)), (2, (100, 111)), (2, (100, 105)), (2, (100, 97)), 
(2, (99, 97)), (2, (98, 101)), (2, (97, 108)), (2, (33, 32)), (2, (32, 114)), 
(2, (32, 110)), (2, (32, 99)), (2, (10, 105)), (1, (239, 188)), (1, (189, 143)), 
(1, (189, 142)), (1, (189, 137)), (1, (189, 133)), (1, (189, 132)), (1, (189, 131)), 
(1, (189, 32)), (1, (188, 181)), (1, (186, 226)), (1, (181, 239)), (1, (180, 226)), 
(1, (179, 226)), (1, (174, 226)), (1, (170, 33)), (1, (169, 226)), (1, (168, 226)), 
(1, (164, 240)), (1, (159, 152)), (1, (158, 240)), (1, (157, 240)), (1, (157, 32)), 
(1, (156, 115)), (1, (153, 116)), (1, (153, 115)), (1, (152, 240)), (1, (152, 132)), 
(1, (148, 226)), (1, (148, 108)), (1, (147, 240)), (1, (146, 240)), (1, (143, 239)), 
(1, (142, 239)), (1, (137, 239)), (1, (135, 186)), (1, (135, 180)), (1, (135, 179)), 
(1, (135, 174)), (1, (135, 170)), (1, (135, 169)), (1, (135, 168)), (1, (133, 164)), 
(1, (133, 158)), (1, (133, 157)), (1, (133, 152)), (1, (133, 148)), (1, (133, 147)), 
(1, (133, 146)), (1, (133, 33)), (1, (132, 239)), (1, (132, 32)), (1, (131, 239)), 
(1, (128, 189)), (1, (128, 157)), (1, (128, 156)), (1, (128, 148)), (1, (122, 101)),
 1, (121, 115)), (1, (121, 101)), (1, (120, 101)), (1, (119, 111)), (1, (119, 105)),
(1, (119, 99)), (1, (119, 97)), (1, (119, 32)), (1, (118, 105)), (1, (117, 116)), 
(1, (117, 114)), (1, (117, 103)), (1, (116, 119)), (1, (116, 116)), (1, (116, 108)), 
(1, (116, 63)), (1, (115, 226)), (1, (115, 111)), (1, (115, 105)), (1, (115, 101)), 
(1, (115, 97)), (1, (114, 117)), (1, (114, 108)), (1, (114, 100)), (1, (114, 95)), 
(1, (112, 116)), (1, (112, 97)), (1, (111, 122)), (1, (111, 119)), (1, (111, 116)), 
(1, (111, 108)), (1, (110, 226)), (1, (110, 110)), (1, (110, 101)), (1, (110, 99)), 
(1, (110, 97)), (1, (110, 46)), (1, (109, 121)), (1, (109, 111)), (1, (109, 105)), 
(1, (108, 117)), (1, (108, 100)), (1, (108, 97)), (1, (107, 110)), (1, (105, 118)), 
(1, (105, 109)), (1, (105, 108)), (1, (105, 103)), (1, (104, 105)), (1, (103, 115)), 
(1, (103, 101)), (1, (103, 46)), (1, (102, 105)), (1, (102, 101)), (1, (101, 120)), 
(1, (101, 109)), (1, (101, 46)), (1, (101, 44)), (1, (100, 119)), (1, (100, 45)), 
(1, (99, 104)), (1, (99, 101)), (1, (98, 115)), (1, (98, 108)), (1, (97, 119)), 
(1, (97, 103)), (1, (97, 102)), (1, (97, 98)), (1, (97, 32)), (1, (95, 116)), 
(1, (87, 101)), (1, (84, 104)), (1, (83, 116)), (1, (73, 32)), (1, (66, 117)), 
(1, (63, 41)), (1, (51, 48)), (1, (48, 32)), (1, (46, 10)), (1, (45, 112)), 
(1, (41, 46)), (1, (40, 119)), (1, (32, 226)), (1, (32, 121)), (1, (32, 118)), 
(1, (32, 117)), (1, (32, 108)), (1, (32, 107)), (1, (32, 104)), (1, (32, 101)), 
(1, (32, 87)), (1, (32, 84)), (1, (32, 83)), (1, (32, 73)), (1, (32, 66)), 
(1, (32, 51)), (1, (32, 40)), (1, (10, 239)), (1, (10, 102))]

'''

#Explanation - 
'''
# iterating through the items of the dictionary, like for example -> ab is the pair and the utf values are 103 and 203. 
# so these(103, 203) are the keys and the value will be the frequency of that pair. (like how many times ab has occurred in the text)
# so what we are doing here is, printing the values of the keys and then sorting them in descending order so that we will have the 
# highest frequency pairs at the first. 

# in the output, we have [20, (101, 32)] as the first element. to check which characters these are : 

print(chr(101))
print(chr(32))

101 is e and 32 is whitespace.
This means that there are 20 words ending with e(becuase whitespace will always come after the letter ends)

'''

#Next step -
'''
so now we have identified the most common pair, we have to iterate over the above output sequence and then mint a new token 
with the ID 256. Because the above tokens go from 0 to 255. So when we create a new token, it will have an ID of 256. 
We are going to iterate through the above list output and everytime we see (101, 32), we are going to swap that out for 256

0-31 bytes -> Control characters (\n, \t, NUL, etc.)
32-126 bytes -> Printable ASCII (letters, digits, symbols)
127 bytes   -> DEL (control)
128-255 bytes -> UTF-8 continuation bytes (multi-byte chars)
'''

top_pair = max(stats, key=stats.get)
print(top_pair)

# Output = (101, 32)
#this basically iterates over the list and checks for the maximum value and returns the key.
# "Find the key in stats dictionary that has the highest frequency value"

def merge(ids, pair, idx):
    #in the list of ids(tokens or integers), replace all consecutive occurrences of pair with the new int idx(256)
    newids = []
    i = 0
    while i < len(ids):
        if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
            newids.append(idx)
            i = i + 2
        else:
            newids.append(ids[i])
            i = i + 1
    return newids

# print(merge([1, 2, 5, 6, 8, 8, 9], pair=(6, 8), idx=10))

'''
TRACING 

ids = [1, 2, 5, 6, 8, 8, 9]
pair = (6, 8)
idx = 10

newids = []
i = 0
while i < len(ids):
0 < 7 -> true
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
    0 < 6 -> true
    ids[0] = 1, pair[0] = 6 -> false

    else:
        newids.append(ids[i])
        
        newids = [1]
        i = i + 1
        i = 1

1 < 7 -> true
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
    1 < 6 -> true
    ids[1] = 2, pair[0] = 6 -> false

    else:
        newids.append(ids[i])

        newids = [1, 2]
        i = i + 1
        i = 2

2 < 7 -> true
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
    2 < 6 -> true
    ids[2] = 5, pair[0] = 6 -> false

    else:
        newids.append(ids[i])

        newids = [1, 2, 5]
        i = i + 1
        i = 3

3 < 7 -> true
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
    3 < 6 -> true
    ids[3] = 6, pair = 6 -> true
    ids[i + 1] = ids[4] = 8, pair[1] = 8 -> true

        newids.append(idx)

        newids = [1, 2, 5, 10]

        i = i + 2
        i = 3 + 2
        i = 5

5 < 7 -> true
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
    5 < 6 -> true
    ids[5] = 8, pair[0] = 6 -> false

    else:
        newids.append(ids[i])

        newids = [1, 2, 5, 10, 8]
        i = i + 1
        i = 6

6 < 7 -> true
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i + 1] == pair[1]:
    6 < 6 -> false

    else:
        newids.append(ids[i])

        newids = [1, 2, 5, 10, 8, 9]

        i = i + 1
        i = 7

7 < 7 -> false
Out of while loop

Output = [1, 2, 5, 10, 8, 9]
'''

#now, implementing it for the actual tokens
tokens2 = merge(tokens, top_pair, 256)
print(tokens2)
print("length = ", len(tokens2))
#length = 601 (Decreased by 20)